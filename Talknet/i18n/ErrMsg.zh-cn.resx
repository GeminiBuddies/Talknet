<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyConnected" xml:space="preserve">
    <value>已经连接。</value>
  </data>
  <data name="CommandExceptionDesc" xml:space="preserve">
    <value>命令处理程序出现了异常：{0}</value>
  </data>
  <data name="EmptyArg" xml:space="preserve">
    <value>参数{0}不能为空。</value>
  </data>
  <data name="ErrorGettingPluginAttribute" xml:space="preserve">
    <value>读取插件类的特性时出现异常。
插件程序集：{0}，插件类：{1}。</value>
  </data>
  <data name="ExceptionDesc" xml:space="preserve">
    <value>{0}：{1}</value>
  </data>
  <data name="ExceptionStacktrace" xml:space="preserve">
    <value>调用栈：</value>
  </data>
  <data name="FatalException" xml:space="preserve">
    <value>命令处理程序未能处理出现的异常，这是致命的。</value>
  </data>
  <data name="InnerExceptionDesc" xml:space="preserve">
    <value>内部错误：{0}：{1}</value>
  </data>
  <data name="LoadOrderCannotBeSatisfied" xml:space="preserve">
    <value>没有合适的初始化插件的顺序。</value>
  </data>
  <data name="NoDataAvailable" xml:space="preserve">
    <value>没有数据。</value>
  </data>
  <data name="NoInnerException" xml:space="preserve">
    <value>没有内部错误。</value>
  </data>
  <data name="NotConnected" xml:space="preserve">
    <value>尚未连接。</value>
  </data>
  <data name="PluginAssemblyNoPluginList" xml:space="preserve">
    <value>插件程序集没有给出插件列表。
插件程序集：{0}。</value>
  </data>
  <data name="PluginItemInvalidName" xml:space="preserve">
    <value>插件的名称无效。</value>
  </data>
  <data name="PluginItemNoAttribute" xml:space="preserve">
    <value>插件必须有TalknetPluginAttribute自定义特性。</value>
  </data>
  <data name="PluginItemNoInterface" xml:space="preserve">
    <value>插件必须实现接口ITalknetPlugin。</value>
  </data>
  <data name="PluginItemNull" xml:space="preserve">
    <value>某一项为null。</value>
  </data>
  <data name="PluginListInvalidItem" xml:space="preserve">
    <value>插件程序集给出的插件列表中有无效项。
插件程序集：{0}，无效项：{1}。
错误信息：{2}</value>
  </data>
  <data name="PluginLoadingException" xml:space="preserve">
    <value>加载插件时发生错误：{0}</value>
  </data>
  <data name="PluginSameName" xml:space="preserve">
    <value>两个插件有相同的名字{0}。"{1}"和"{2}"。</value>
  </data>
  <data name="RequirementsCannotBeSatisfied" xml:space="preserve">
    <value>不能满足插件依赖关系。"{0}"({1})依赖于未被找到的插件{2}。</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>未知的命令：{0}。</value>
  </data>
</root>